{"version":3,"sources":["logo.svg","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","calculateWinner","lines","length","a","b","c","Game","state","history","Array","fill","stepNumber","xIsNext","slice","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","App","document","title","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e0190c17.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nfunction Square(props) {\n\treturn (\n\t  <button className=\"square\" onClick={props.onClick}>\n\t\t{props.value}\n\t  </button>\n\t);\n  }\n\n  class Board extends React.Component {\n\trenderSquare(i) {\n\t  return (\n\t\t<Square\n\t\t  value={this.props.squares[i]}\n\t\t  onClick={() => this.props.onClick(i)}\n\t\t/>\n\t  );\n\t}\n\n\trender() {\n\t  return (\n\t\t<div>\n\t\t  <div className=\"board-row\">\n\t\t\t{this.renderSquare(0)}\n\t\t\t{this.renderSquare(1)}\n\t\t\t{this.renderSquare(2)}\n\t\t  </div>\n\t\t  <div className=\"board-row\">\n\t\t\t{this.renderSquare(3)}\n\t\t\t{this.renderSquare(4)}\n\t\t\t{this.renderSquare(5)}\n\t\t  </div>\n\t\t  <div className=\"board-row\">\n\t\t\t{this.renderSquare(6)}\n\t\t\t{this.renderSquare(7)}\n\t\t\t{this.renderSquare(8)}\n\t\t  </div>\n\t\t</div>\n\t  );\n\t}\n  }\n\n  class Game extends React.Component {\n\tconstructor(props) {\n\t  super(props);\n\t  this.state = {\n\t\thistory: [\n\t\t  {\n\t\t\tsquares: Array(9).fill(null)\n\t\t  }\n\t\t],\n\t\tstepNumber: 0,\n\t\txIsNext: true\n\t  };\n\t}\n\n\thandleClick(i) {\n\t  const history = this.state.history.slice(0, this.state.stepNumber + 1);\n\t  const current = history[history.length - 1];\n\t  const squares = current.squares.slice();\n\t  if (calculateWinner(squares) || squares[i]) {\n\t\treturn;\n\t  }\n\t  squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n\t  this.setState({\n\t\thistory: history.concat([\n\t\t  {\n\t\t\tsquares: squares\n\t\t  }\n\t\t]),\n\t\tstepNumber: history.length,\n\t\txIsNext: !this.state.xIsNext\n\t  });\n\t}\n\n\tjumpTo(step) {\n\t  this.setState({\n\t\tstepNumber: step,\n\t\txIsNext: (step % 2) === 0\n\t  });\n\t}\n\n\trender() {\n\t  const history = this.state.history;\n\t  const current = history[this.state.stepNumber];\n\t  const winner = calculateWinner(current.squares);\n\n\t  const moves = history.map((step, move) => {\n\t\tconst desc = move ?\n\t\t  'Go to move #' + move :\n\t\t  'Go to game start';\n\t\treturn (\n\t\t  <li key={move}>\n\t\t\t<button onClick={() => this.jumpTo(move)}>{desc}</button>\n\t\t  </li>\n\t\t);\n\t  });\n\n\t  let status;\n\t  if (winner) {\n\t\tstatus = \"Winner: \" + winner;\n\t  } else {\n\t\tstatus = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n\t  }\n\n\t  return (\n\t\t<div className=\"game\">\n\t\t  <div className=\"game-board\">\n\t\t\t<Board\n\t\t\t  squares={current.squares}\n\t\t\t  onClick={i => this.handleClick(i)}\n\t\t\t/>\n\t\t  </div>\n\t\t  <div className=\"game-info\">\n\t\t\t<div>{status}</div>\n\t\t\t<ol>{moves}</ol>\n\t\t  </div>\n\t\t</div>\n\t  );\n\t}\n  }\n\n  // ========================================\n\n  function calculateWinner(squares) {\n\tconst lines = [\n\t  [0, 1, 2],\n\t  [3, 4, 5],\n\t  [6, 7, 8],\n\t  [0, 3, 6],\n\t  [1, 4, 7],\n\t  [2, 5, 8],\n\t  [0, 4, 8],\n\t  [2, 4, 6]\n\t];\n\tfor (let i = 0; i < lines.length; i++) {\n\t  const [a, b, c] = lines[i];\n\t  if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n\t\treturn squares[a];\n\t  }\n\t}\n\treturn null;\n  }\n\nexport default Game;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  document.title = \"井田棋\";\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Game />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}